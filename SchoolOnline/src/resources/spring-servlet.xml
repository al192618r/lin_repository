<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:jaxws="http://cxf.apache.org/jaxws"  
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
  http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans.xsd
  http://www.springframework.org/schema/util
  http://www.springframework.org/schema/util/spring-util.xsd
  http://www.springframework.org/schema/context 
  http://www.springframework.org/schema/context/spring-context.xsd
  http://www.springframework.org/schema/mvc

  http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
  http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
   http://www.springframework.org/schema/aop 
  http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
  http://www.springframework.org/schema/cache   
  http://www.springframework.org/schema/cache/spring-cache.xsd">

	<!-- 默认的注解映射的支持 -->  
<!-- 	 <aop:aspectj-autoproxy />    -->
    <mvc:annotation-driven/>
   <mvc:default-servlet-handler/> 
 <context:annotation-config />
	<!-- 如果当前请求为“/”时，则转发到“/helloworld/index” -->
<!--  	<mvc:view-controller path="/"  -->
<!--  		view-name="redirect:/loginController.do?login" />  -->
	    <!--配置拦截器, 多个拦截器,顺序执行 -->
       
<!--         当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
	<!-- 静态资源映射 -->
		<mvc:resources mapping="/images/**" location="/images/" 
		              cache-period="31556926" />
		<mvc:resources mapping="/js/**" location="/js/"
		              cache-period="31556926" />
		<mvc:resources mapping="/css/**" location="/css/"
		              cache-period="31556926" /> 
	<!-- 当上面要访问的静态资源不包括在上面的配置中时，则根据此配置来访问 -->
	

	<!-- 开启controller注解支持 -->
	<!-- use-default-filters="false" 只扫描指定的注解 -->
	<context:component-scan base-package="com.fgi.controller"
		use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 第一种 
	
	<context:component-scan base-package="com.fd.service" use-default-filters="false"> 
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service" /> 
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" /> 
    </context:component-scan> 
-->
    	<!-- 第二种配置   -->
     <context:component-scan base-package="com.fgi.service,com.fgi.dao,com.fgi.idao">
 		<context:exclude-filter type="annotation" 
 			expression="org.springframework.stereotype.Controller" />
 	</context:component-scan> 

    
	<!-- 视图解析器 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
			<property name="order" value="1" /> 
		<property name="prefix" value="/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="com.fgi.utils.HtmlResourceView" />
			<property name="order" value="0" /> 
		<property name="prefix" value="/views/" />
		<property name="suffix" value=".html" />
	</bean>
	<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>  
	<!-- 支持上传文件 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设置上传文件的最大尺寸为1MB -->
		<property name="maxUploadSize">
			<value>1048576</value>
		</property>
		<property name="defaultEncoding">
			<value>UTF-8</value>
		</property>
	</bean>
<!-- 默认的注解映射的支持 -->  
    <mvc:annotation-driven validator="validator" />
    <!-- 以下 validator  ConversionService 在使用 mvc:annotation-driven 会 自动注册-->  
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">  
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>  
        <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->  
        <property name="validationMessageSource" ref="messageSource"/>  
    </bean>  
       
    <!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->  
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">  
        <property name="basenames">  
            <list>  
                <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找  -->  
                <value>classpath:validatemessages</value>  
            </list>  
        </property>  
        <property name="useCodeAsDefaultMessage" value="false"/>  
        <property name="defaultEncoding" value="UTF-8"/>  
        <property name="cacheSeconds" value="60"/>  
    </bean>
    
    
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="stringHttpMessageConverter"/>
                <ref bean="jsonHttpMessageConverter" />
			</list>
		</property>
	</bean>

	<bean id="jsonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html; charset=UTF-8</value>  
                <value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>
<!-- 	<bean id="exceptionResolver" class="com.fd.core.GlobleHandlerExceptionResolver"/> -->
	<!-- String Converter 保证正常输出字符串 -->
    <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/plain;charset=UTF-8</value>
                <value>apolication/json; charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <!-- 全局异常配置 start -->     
<!--      <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">      -->
<!--          <property name="exceptionMappings">      -->
<!--              <props>      -->
<!--                  <prop key="java.lang.Exception">errors/error</prop>      -->
<!--                  <prop key="java.lang.Throwable">errors/err</prop>      -->
<!--              </props>      -->
<!--          </property>      -->
<!--          <property name="statusCodes">      -->
<!--              <props>      -->
<!--                  <prop key="errors/error">500</prop>      -->
<!--                  <prop key="errors/404">404</prop>      -->
<!--              </props>      -->
<!--          </property>      -->
         <!-- 设置日志输出级别，不定义则默认不输出警告等错误日志信息 -->     
<!--          <property name="warnLogCategory" value="WARN"></property>      -->
         <!-- 默认错误页面，当找不到上面mappings中指定的异常对应视图时，使用本默认配置 -->     
<!--          <property name="defaultErrorView" value="errors/error"></property>      -->
         <!-- 默认HTTP状态码 -->     
<!--          <property name="defaultStatusCode" value="500"></property>      -->
<!--      </bean>      -->
     <!-- 全局异常配置 end -->  
<!--    <bean  class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">   -->
    <!-- 定义默认的异常处理页面，当该异常类型的注册时使用 -->  
<!--     <property name="defaultErrorView" value="error"></property>   -->
    <!-- 定义异常处理页面用来获取异常信息的变量名，默认名为exception -->  
<!--     <property name="exceptionAttribute" value="ex"></property>   -->
    <!-- 定义需要特殊处理的异常，用类名或完全路径名作为key，异常也页名作为值 -->  
<!--     <property name="exceptionMappings">   -->
<!--         <props>   -->
<!--             <prop key="com.fd.exception.BusinessException">error-business</prop>   -->
<!--             <prop key="com.fd.ParamException">error-parameter</prop>   -->
  
            <!-- 这里还可以继续扩展对不同异常类型的处理 -->  
<!--         </props>   -->
<!--     </property>   -->
  
<!-- </bean>   -->
<!--  
     
    <bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">    
        <property name="configLocation"  value="classpath:com/config/ehcache.xml"/>   
    </bean>   
      
    
    <cache:annotation-driven cache-manager="cacheManager" />  
      
   
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">    
        <property name="cacheManager"  ref="cacheManagerFactory"/>    
    </bean> 
    -->
</beans>